import Params from "./params.js";
import Result from "./result.js";
export default class ConvertApi {
    static auth(credentials, host) {
        return new ConvertApi(credentials, host);
    }
    constructor(authCredentials, host = 'v2.convertapi.com') {
        this.authCredentials = authCredentials;
        this.host = host;
    }
    createParams(init) {
        return new Params(this.host, init);
    }
    convert(fromFormat, toFormat, params) {
        return Promise.resolve(params.dto)
            .then(dto => {
            return fetch(`https://${this.host}/convert/${fromFormat}/to/${toFormat}?storefile=true`, {
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                    'authorization': `Bearer ${this.authCredentials}`
                },
                body: JSON.stringify(dto)
            })
                .then(r => Promise.all([r.ok, r.json()]))
                .then(([ok, o]) => ok ? o : Promise.reject(o))
                .then(dto => new Result(dto));
        });
    }
}
//# sourceMappingURL=convertapi.js.map